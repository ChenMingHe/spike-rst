#! /usr/bin/env ruby

require 'optparse'
require 'yaml'

USAGE =
    "USAGE:
    rst test --plugin <name> --script <name-list>
example:
    rst test --plugin spike_send_tcp
    rst test --plugin spike_send_tcp --script t01.spk

"

command = nil
options = {}
OptionParser.new do |opts|
  opts.banner = USAGE
  opts.separator "argument"
  opts.on("-p", "--plugin <name>", "plugin name") do |name|
    options[:plugin_name] = name
  end
  opts.on("-s", "-script <name-list>", Array, "Select encoding") do |list|
    options[:script_name] = list
  end

end.parse!

if options[:plugin_name].nil?
  STDERR.puts USAGE
  exit 1
end

command = options[:script_name].nil? ? "test_default" : "test_local"

module RstTest
  def self.test_local options
    # 初始化插件加载路径
    plugin_name = options[:plugin_name]
    plugin_launch = init_plugin_launch(plugin_name)

    # 加载配置
    plugin_args, base_dir = init_plugin_args(plugin_name)
    base_dir = `pwd` # 因为是测试本地脚本，所以使用pwd获取本地目录路径

    run(base_dir, plugin_args, plugin_launch, plugin_name, options[:script_name])
  end

  def self.test_default options
    # 初始化插件加载路径
    plugin_name = options[:plugin_name]
    plugin_launch = init_plugin_launch(plugin_name)

    # 加载配置
    plugin_args, base_dir = init_plugin_args(plugin_name)

    # 获取运行脚本
    if plugin_args["script"].nil?
      STDERR.puts "ERROR : [#{plugin_name}] argument 'script' config is needed"
      exit 1
    end
    script_config = plugin_args["script"]
    test_scripts = script_config["test_scripts"].nil? ? Array.new : script_config["test_scripts"]
    ignore_scripts = script_config["ignore_scripts"].nil? ? Array.new : script_config["ignore_scripts"]
    script_list = get_script_list(base_dir, test_scripts, ignore_scripts)

    run(base_dir, plugin_args, plugin_launch, plugin_name, script_list)
  end

  def self.run(base_dir, plugin_args, plugin_launch, plugin_name, script_list)
    count = 0
    script_list.each do |script|
      unless File.exist?(File.join(base_dir, script))
        STDERR.puts "WARRING : [#{script}] does not exist, continue."
        next
      end
      # 初始化参数列表
      cmd_args_array = init_command_args_array(plugin_args, script)

      count += 1
      # 启动插件，执行测试
      id = fork do
        STDOUT.puts "Test #{count}: #{plugin_name} #{cmd_args_array.join(" ")}"
        exec("#{plugin_launch} #{cmd_args_array.join(" ")}")
      end
      pid, status = Process.waitpid2(id)
    end
  end


  private
  def self.init_command_args_array(plugin_args, script)
    cmd_args_array = Array.new
    plugin_args.each do |key, value|
      if !value["index"].nil? and value["index"].is_a?(Fixnum) and value["index"] != 0
        if key == "script"
          cmd_args_array[value["index"]] = script
        else
          cmd_args_array[value["index"]] = value["value"]
        end
      end
    end
    cmd_args_array
  end

  def self.get_script_list(base_dir, test_scripts, ignore_scripts)
    script_list = Array.new
    if test_scripts.nil? or (test_scripts.is_a?(String) and test_scripts == "all")
      Dir.foreach(base_dir) do |script_name|
        script_list.push script_name if script_name != "." and script_name != ".."
      end
    end
    script_list = script_list - ignore_scripts
  end

  def self.init_plugin_args(plugin_name)
    plugin_config_file = File.expand_path(File.join("..", "..", "plugin", "config", "#{plugin_name}.yml"), File.dirname(__FILE__))
    unless File.exist? plugin_config_file
      STDERR.puts "ERROR : [#{plugin_name}] can not find plugin config file #{plugin_config_file}"
      exit 1
    end
    plugin_args = YAML.load_file(plugin_config_file)

    base_dir = File.expand_path(File.join("..", "..", "script", plugin_name), File.dirname(__FILE__))
    return plugin_args, base_dir
  end

  def self.init_plugin_launch(plugin_name)
    plugin_launch = File.expand_path(File.join("..", "..", "plugin", "#{plugin_name}"), File.dirname(__FILE__))
    unless File.exist? plugin_launch
      STDERR.puts "ERROR : [#{plugin_name}] can not load plugin"
      exit 1
    end
    plugin_launch
  end
end

RstTest.send(command, options) if RstTest.respond_to? command
